# configuration - Hosts - 404 Hosts - <domain> - edit - Advanced
# ------------------------------------------------------------
# Custom Nginx Configuration
# ------------------------------------------------------------

# CloudFlare IPs
set_real_ip_from 103.21.244.0/22;
set_real_ip_from 103.22.200.0/22;
set_real_ip_from 103.31.4.0/22;
set_real_ip_from 104.16.0.0/12;
set_real_ip_from 108.162.192.0/18;
set_real_ip_from 131.0.72.0/22;
set_real_ip_from 141.101.64.0/18;
set_real_ip_from 162.158.0.0/15;
set_real_ip_from 172.64.0.0/13;
set_real_ip_from 173.245.48.0/20;
set_real_ip_from 188.114.96.0/20;
set_real_ip_from 190.93.240.0/20;
set_real_ip_from 197.234.240.0/22;
set_real_ip_from 198.41.128.0/17;
set_real_ip_from 2400:cb00::/32;
set_real_ip_from 2606:4700::/32;
set_real_ip_from 2803:f800::/32;
set_real_ip_from 2405:b500::/32;
set_real_ip_from 2405:8100::/32;
set_real_ip_from 2c0f:f248::/32;
set_real_ip_from 2a06:98c0::/29;

real_ip_header CF-Connecting-IP;
proxy_set_header CF-IPCountry $http_cf_ipcountry;

location /favicon.ico {
  root /usr/local/openresty/nginx/html;
  try_files $uri =404;
}

location /health {
  add_header Content-Type text/plain;
  return 200 "OK";
}

location /country {
  default_type text/plain;
  return 200 "$http_cf_ipcountry";
}

location / {
  default_type text/plain;
  return 200 "$remote_addr";
}

location /json {
  # set header_x_real_ip to http_x_real_ip if present
  if ($http_x_real_ip) {
    set $header_x_real_ip $http_x_real_ip;
  }
  
  # set header_x_real_ip to http_x_custom_real_ip if present
  if ($http_x_custom_real_ip) {
    set $header_x_real_ip $http_x_custom_real_ip;
  }
  
  # set header_x_real_ip to http_x_header_real_ip if present
  if ($http_x_header_real_ip) {
    set $header_x_real_ip $http_x_header_real_ip;
  }
  
  default_type "application/json";
  content_by_lua_block {
    if ngx.var.geoip2_data_country_code and ngx.var.geoip2_data_country_name then
	  ngx.say("{\"IP\":\"" .. ngx.var.header_x_real_ip .. "\",\"iso2Code\":\"" .. ngx.var.geoip2_data_country_code .. "\",\"name\":\"" .. ngx.var.geoip2_data_country_name .. "\"}")
    else
	  ngx.say("{\"status\":\"header_error\"}")
    end
  }
}

location /help {
  default_type text/plain;
  return 200 "# test with any public IP\n# Header priority: 1. X-Header-Real-Ip (Highest) 1. X-Custom-Real-Ip 2. X-Real-Ip 3. CF-Connecting-IP\ncurl localhost:8080 -H \"X-Header-Real-Ip: 8.8.8.8\"\ncurl localhost:8080 -H \"X-Custom-Real-Ip: 8.8.8.8\"\ncurl localhost:8080 -H \"X-Real-Ip: 8.8.8.8\"\ncurl localhost:8080 -H \"CF-Connecting-IP: 8.8.8.8\"\ncurl localhost:8080/ip/8.8.8.8\ncurl localhost:8080/ip/city/8.8.8.8\n";
}

location /ip/ {
  default_type "text/plain";
  set $ip_uri '';
  content_by_lua_block {
    ngx.var.ip_uri = ngx.re.sub(ngx.var.uri, "/ip/", "")
    if ngx.var.geoip2_data_country_code_by_uri and ngx.var.geoip2_data_country_name_by_uri then
      ngx.say(geoip2_data_country_code_by_uri)
    else
      ngx.say("ip_error")
    end
  }
}

location /ip/json/ {
  default_type "application/json";
  set $ip_uri '';
  content_by_lua_block {
    ngx.var.ip_uri = ngx.re.sub(ngx.var.uri, "/ip/json/", "")
    if ngx.var.geoip2_data_country_code_by_uri and ngx.var.geoip2_data_country_name_by_uri then
	  ngx.say("{\"IP\":\"" .. ngx.var.ip_uri  ..  "\",\"iso2Code\":\"" .. ngx.var.geoip2_data_country_code_by_uri .. "\",\"name\":\"" .. ngx.var.geoip2_data_country_name_by_uri .. "\"}")
    else
      ngx.say("{\"status\":\"ip_error\"}")
    end
  }
}

# NOTE: for GeoIP2-City DB
location /ip/city/json/ {
  default_type "application/json";
  set $ip_uri '';
  content_by_lua_block {
    ngx.var.ip_uri = ngx.re.sub(ngx.var.uri, "/ip/city/json/", "")
    if ngx.var.geoip2_data_country_code_by_uri and ngx.var.geoip2_data_country_name_by_uri and  ngx.var.geoip2_data_city_name_by_uri and  ngx.var.geoip2_data_continent_name_by_uri and  ngx.var.geoip2_data_subdivision_code_by_uri and  ngx.var.geoip2_data_subdivision_name_by_uri then
      ngx.say("{\"IP\":\"" .. ngx.var.ip_uri  ..  "\",\"country_iso_code\":\"" .. ngx.var.geoip2_data_country_code_by_uri .. "\",\"country_name\":\"" .. ngx.var.geoip2_data_country_name_by_uri .. "\",\"city_name\":\"" .. ngx.var.geoip2_data_city_name_by_uri .. "\",\"continent_name\":\"" .. ngx.var.geoip2_data_continent_name_by_uri .. "\",\"subdivisions1_iso_code\":\"" .. ngx.var.geoip2_data_subdivision_code_by_uri .. "\",\"subdivision_name\":\"" .. ngx.var.geoip2_data_subdivision_name_by_uri .. "\"}")
    else
      ngx.say("{\"status\":\"ip_error\"}")
    end
  }
}
